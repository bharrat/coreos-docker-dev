#cloud-config

#
# cloud-init configration for files
#

write_files:
  - path: /var/lib/skydns/envvars
    permissions: 0644
    owner: root
    content: |
        LOCAL_DOMAIN=docker.local
        LOCAL_DOMAIN_PATH=/skydns/local/docker
        SKYDNS_CONFIG='{"domain":"docker.local", "dns_addr":"0.0.0.0:53", "ttl":3600, "nameservers": ["8.8.8.8:53","8.8.4.4:53"]}'
        SKYDNS_CMD_REPO=https://github.com/xuwang/skydns-docker/releases/download/skydns-7025dba3834f/skydns
  - path: /etc/resolv.conf.skydns
    permissions: 0644
    owner: root
    content: |
        domain docker.local
        search docker.local
        nameserver 127.0.0.1
  - path: /etc//etc/sysctl.d/overcommit_memory.conf
    permissions: 0644
    owner: root
    content: |
        # see http://www.redhat.com/magazine/001nov04/features/vm/
        # may be needed for memory based datastore, e.g. redis
        vm.overcommit_memory = 1
  - path: /etc/profile.d/path.sh
    content: |
        export PATH=$PATH:/var/lib/apps/bin
  - path: /etc/profile.d/alias.sh
    content: |
        alias lal="ls -al"
        alias ll="ls -l"
        alias dk="docker "
        alias dkc="dk ps"
        alias dkm="dk images"
        alias dki="dk inspect"
        alias dkb="dk build"
        alias cleandkc="dkc -a --no-trunc| grep Exit | awk '{print \$1}' | xargs -L 1 -r docker rm"
        alias cleandkm="dkm -a --no-trunc | grep none | awk '{print \$3}' | xargs -L 1 -r docker rmi"
        alias cleandk="cleandkc && cleandkm"
        alias sd="sudo systemctl"
        alias sdl="sd list-units"
        alias sds="sd status"
        alias sdcat="sd cat"
        alias cci="sudo coreos-cloudinit --from-file"
        alias j="journalctl"
        alias jfu="journalctl -f -u"
        alias e="etcdctl"
        alias els="e ls --recursive"
        alias eget="e get"
        alias eset="e set"
        alias f="fleetctl -strict-host-key-checking=false"
        alias fcat="f cat"
        alias fss="f status"
        alias fst="f start"
        alias fdy="f destroy"
        alias flm="f list-machines"
        alias flu="f list-units"
        alias fsh="f ssh"
        function dkip() { docker inspect --format "{{ .NetworkSettings.IPAddress }}" $1 ; }
        function dkid() { docker inspect --format "{{ .ID }}" $1 ; }
        function dkim() { docker inspect --format "{{ .Image }}" $1 ; }
        function dkst() { docker inspect --format "{{ .State.Running }}" $1 ; }
        function sdrit() { sudo docker start-i -t $1 bash ; }
        function nsa { sudo nsenter -p -u -m -i -n -t $(docker inspect -f "{{ .State.Pid }}" $1) ; }     
  - path: /etc/profile.d/etcd-envvars.sh
    permissions: 0644
    owner: root
    content: |
      ##########################################################
      # Use secure etcd service
      # these env vars are necessary for tools that talk to etcd
      # 
      # make sure this file has the right values and drop it
      # under the /etc/profile.d
      
      # ETCD Client certs
      export ETCD_CERTFILE=/var/lib/apps/certs/etcd-client.crt
      export ETCD_KEYFILE=/var/lib/apps/certs/etcd-client.key
      # ETCD_CAFILE is not required if the CA cert is already in system ca roots
      export ETCD_CAFILE=/var/lib/apps/certs/rootCA.pem
      
      # for etcdctl
      #  etcdclt is not support ssl yet: see https://github.com/coreos/etcdctl/issues/33
      #  export ETCDCTL_PEERS="https://127.0.0.1:4001,https://172.17.8.101:4001"
      
      # for fleetctl. Note: FLEETCTL_ENDPOINT only take one url
      export FLEETCTL_ENDPOINT="https://172.17.8.101:4001"
      export FLEETCTL_ETCD_CERTFILE=$ETCD_CERTFILE
      export FLEETCTL_ETCD_KEYFILE=$ETCD_KEYFILE
      export FLEETCTL_ETCD_CA_FILE=$ETCD_CAFILE
  - path: /run/systemd/system/etcd.service.d/30-certificates.conf
    permissions: 0644
    content: |
      [Service]
      # Server certs
      Environment=ETCD_CA_FILE=/var/lib/apps/certs/rootCA.pem
      Environment=ETCD_CERT_FILE=/var/lib/apps/certs/etcd.crt
      Environment=ETCD_KEY_FILE=/var/lib/apps/certs/etcd.key
      # Peer certs
      # Environment=ETCD_PEER_CA_FILE=/var/lib/apps/certs/rootCA.pem
      # Environment=ETCD_PEER_CERT_FILE=/var/lib/apps/certs/etcd.crt
      # Environment=ETCD_PEER_KEY_FILE=/var/lib/apps/certs/etcd.key
  - path: /run/systemd/system/skydns.service.d/30-certificates.conf
    permissions: 0644
    content: |
      [Service]
      # ETCD certs
      Environment=ETCD_TLSPEM=/var/lib/apps/certs/etcd-client.crt
      Environment=ETCD_TLSKEY=/var/lib/apps/certs/etcd-client.key
      Environment=ETCD_CACERT=/var/lib/apps/certs/rootCA.pem
      # ETCD endpoints
      Environment="ETCD_MACHINES=https://127.0.0.1:4001,https://172.17.8.101:4001"
  - path: /etc/fleet/fleet.conf
    permissions: 0644
    content: |     
      # This config file is INI-formatted
      
      # Lower the logging threshold. Acceptable values are 0, 1, and 2. A higher
      # value corresponds to a lower logging threshold.
      # verbosity=0
      
      # Provide a custom set of etcd endpoints. The default value is determined
      # by the underlying go-etcd library.
      # Note: use https endpoints when etcd TLS auth is enabled
      etcd_servers=["https://127.0.0.1:4001"]
      
      # Amount of time in seconds to allow a single etcd request before considering it failed.
      # etcd_request_timeout=1.0
      
      # Provide TLS configuration when SSL certificate authentication is enabled in etcd endpoints
      etcd_cafile="/var/lib/apps/certs/rootCA.pem"
      etcd_keyfile="/var/lib/apps/certs/etcd-client.key"
      etcd_certfile="/var/lib/apps/certs/etcd-client.crt"
      
      # IP address that should be published with any socket information. By default,
      # no IP address is published.
      # public_ip=""
      
      # Comma-delimited key/value pairs that are published to the fleet registry.
      # This data can be referenced in unit files to affect scheduling decisions.
      # An example could look like: metadata="region=us-west,az=us-west-1"
      # metadata=""
      
      # An Agent will be considered dead if it exceeds this amount of time to
      # communicate with the Registry. The agent will attempt a heartbeat at half
      # of this value.
      # agent_ttl="30s"
      
      # Interval at which the engine should reconcile the cluster schedule in etcd.
      # engine_reconcile_interval=2